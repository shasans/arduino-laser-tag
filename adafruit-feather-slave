#include <Wire.h>
#include <limits.h>
#include <WiFi101.h>
#include <SPI.h>

String field1 = "";
int counter = 0;

bool onComplete = false;

String field2 = "";
int Score = 0;
int x;

//===========WiFi Settings==========================

char ssid[] = "Open-Access";      // network SSID
//char pass[] = "";    // your network password
WiFiClient client;
WiFiServer server(80);
int status = WL_IDLE_STATUS;

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  Serial.print("signal strength (RSSI):");
  Serial.print(rssi);
  Serial.println(" dBm");
}

//================ThingSpeak Settings=======================

char thingSpeakAddress[] = "api.thingspeak.com";

String APIKey1 = "Q31EX4FLCNZYLG7N";

long lastConnectionTime = 0;
boolean lastConnected = false;
const int updateThingSpeakInterval = 20 * 1000;

void updateThingSpeak(String tsData, String APIKey) {
  if (client.connect(thingSpeakAddress, 80)) {
    client.print("POST /update HTTP/1.1\n");
    client.print("Host: api.thingspeak.com\n");
    client.print("Connection: close\n");
    client.print("X-THINGSPEAKAPIKEY: " + APIKey + "\n");
    client.print("Content-Type: application/x-www-form-urlencoded\n");
    client.print("Content-Length: ");
    client.print(tsData.length());
    client.print("\n\n");
    client.print(tsData);
    lastConnectionTime = millis();

    if (client.connected()) {
      Serial.println("Connecting to ThingSpeak...");
      Serial.println();
    }
  }
}

    
//========================================================



void setup() {
 Serial.begin(9600);
 Wire.begin(5);
 Wire.onReceive(receiveEvent); 

pinMode(13,OUTPUT);
  WiFi.setPins(8, 7, 4, 2);

  if (WiFi.status() == WL_NO_SHIELD)
  {
    Serial.println("WiFi shield not present");
    // don't continue:

    while (true);
  }

  // attempt to connect to Wifi network:
  while ( status != WL_CONNECTED)
  {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid);
    //status = WiFi.begin(ssid);

    // wait 10 seconds for connection:
    delay(10000);
  }

  // you're connected now, so print out the status:
  printWifiStatus();
 
}

void loop() {
  if (client.available())
  {
    char c = client.read();
    Serial.print(c);
  }

  if (!client.connected() && lastConnected)
  {
    Serial.println("...disconnected");
    Serial.println();
    client.stop();
  }



  if (!client.connected() && (millis() - lastConnectionTime > updateThingSpeakInterval)) {
    field1 = counter;
   // updateThingSpeak("field1=" + field1 , APIKey1);
    counter++;
 /*     digitalWrite(13, HIGH);
      delay(500);
      digitalWrite(13, LOW);
      delay(500); */
    
   // Serial.println("Total Score = " + Score);
    Score += x;
    field2 = Score;
    updateThingSpeak("field1=" + field1 + "&field2=" + field2 , APIKey1);
    
  }
  lastConnected = client.connected();

} 

void receiveEvent(int howMany){
  while(Wire.available()){
 // Serial.print(Wire.read());
  x = Wire.read();
 // Serial.println(x);
 // Score += x;
// Serial.println("Total Score = " + Score);
  onComplete = true;
 
  }
}
